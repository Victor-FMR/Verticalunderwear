generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD

model ShoppingCart {
  idShoppingCart String    @id @default(uuid()) @db.Uuid
  userId         String    @unique @db.Uuid
  products       Product[] @relation("ShoppingCartProducts")
  quantity       Int       @default(1)
  totalPrice     Decimal   @db.Decimal(10, 2)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
}

model Product {
  idProduct      String        @id @default(uuid()) @db.Uuid
  productName    String
  description    String
  stock          Int?
  price          Decimal       @db.Decimal(9, 2)
  image          String
  ratings        Ratings[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shoppingCartId String?       @db.Uuid
  shoppingCart   ShoppingCart? @relation("ShoppingCartProducts", fields: [shoppingCartId], references: [idShoppingCart])
}

model Ratings {
  idRating  String   @id @unique @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  stars     Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [idProduct])
  user    User    @relation(fields: [userId], references: [id])
}

model User {
  id             String           @id @unique @default(uuid()) @db.Uuid
  username       String
  lastname       String
  email          String           @unique
  phone_number   String?
  age            Int?
  password       String
  is_active      Boolean?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  roles          Roles[]
  addresses      Address[]        @relation("UserAddresses")
  orders         Order[]
  ratings        Ratings[]
  shoppingCarts  ShoppingCart[]
  paymentMethods paymentMethods[]
}

model paymentMethods {
  id_paymentMethod String @id @unique @default(uuid()) @db.Uuid
  userId           String @db.Uuid
  numeroTarjeta    String  @unique
  nombreTitular    String
  monthVencimiento String // Mes de vencimiento
  yearVencimiento  String // Año de vencimiento
  //fechaVencimiento    DateTime   // Puedes usar un tipo de datos específico de fecha según tu base de datos
  codigoSeguridad  String // CVV

  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  // Otros campos adicionales según los requisitos específicos
}

model Address {
  idAddress    String   @id @unique @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  street       String
  city         String
  zipcode      Int
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("UserAddresses", fields: [userId], references: [id])
  Order        Order[]
  maxAddresses Int?
}

model Order {
  idOrder          String  @id @unique @default(uuid()) @db.Uuid
  userId           String  @db.Uuid
  orderNumber      String  @unique
  addressIdAddress String  @db.Uuid
  //products        Product[]
  shippingAddress  Address @relation(fields: [addressIdAddress], references: [idAddress])
  totalAmount      Decimal @db.Decimal(10, 2)

  paymentMethod String
  createdAt     DateTime    @default(now())
  completedAt   DateTime
  updatedAt     DateTime    @updatedAt
  status        OrderStatus
  user          User        @relation(fields: [userId], references: [id])
=======
model User {
  id           Int       @id @default(autoincrement())
  username     String
  email        String    @unique
  phone_number String?
  age          Int?
  password     String
  is_active    Boolean?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastname     String
  addresses    Address[] @relation("UserAddresses")
  orders       Order[]
  ratings      Rating[]
  sessions     Session[] @relation("UserSessions")
}

model GoogleAuth {
  id             Int      @id @default(autoincrement())
  googleId       String   @unique
  googleUsername String
  googleEmail    String   @unique
  googlePhone    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserSessions", fields: [userId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  zipcode   String
  country   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserAddresses", fields: [userId], references: [id])
}

model Product {
  id           Int               @id @default(autoincrement())
  price        Float
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  description  String?
  name_product String
  stock        Int
  orders       OrderItem[]
  ratings      Rating[]
  categories   ProductCategory[] @relation("ProductCategories")
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductCategories")
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  totalPrice    Float
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        OrderStatus
  user          User        @relation(fields: [userId], references: [id])
  products      OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  stars     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
>>>>>>> 300602aec16cc16a19f4aab068bc647609730ab2
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
<<<<<<< HEAD

enum Roles {
  ADMINISTRADOR
  MIEMBRO
  CLIENTE
}
=======
>>>>>>> 300602aec16cc16a19f4aab068bc647609730ab2
