generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model ShoppingCart {
  idShoppingCart String    @id @default(uuid()) @db.Uuid
  userId         String    @unique @db.Uuid
  quantity       Int       @default(1)
  totalPrice     Decimal   @db.Decimal(10, 2)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  cartItems      CartItem[]    // Relación con la nueva tabla intermedia
}
model CartItem {
  idCartItem     String        @id @default(uuid())
  shoppingCartId String        @db.Uuid
  productId      String        @db.Uuid
  quantity       Int           @default(1)
  priceAtAdd     Decimal       @db.Decimal(9, 2) // Opcional, precio del producto al añadir al carrito
  shoppingCart   ShoppingCart  @relation(fields: [shoppingCartId], references: [idShoppingCart])
  product        Product       @relation(fields: [productId], references: [idProduct])
}
model Product {
  idProduct      String        @id @default(uuid()) @db.Uuid
  productName    String
  description    String
  stock          Int?
  price          Decimal       @db.Decimal(9, 2)
  imageUrl       String
  ratings        Ratings[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cartItems      CartItem[] 
  orderItems     OrderItem[]
  // Elimina la relación directa con ShoppingCart
}

model Ratings {
  idRating  String   @id @unique @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  stars     Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [idProduct])
  user    User    @relation(fields: [userId], references: [id])
}

model User {
  id             String           @id @unique @default(uuid()) @db.Uuid
  username       String
  lastname       String
  email          String           @unique
  phone_number   String?
  age            Int?
  password       String
  is_active      Boolean?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  roles          Roles[]
  addresses      Address[]        @relation("UserAddresses")
  orders         Order[]
  ratings        Ratings[]
  shoppingCarts  ShoppingCart[]
  paymentMethods paymentMethods[]
}

model paymentMethods {
  id_paymentMethod String @id @unique @default(uuid()) @db.Uuid
  userId           String @db.Uuid
  numeroTarjeta    String  @unique
  nombreTitular    String
  monthVencimiento String // Mes de vencimiento
  yearVencimiento  String // Año de vencimiento
  //fechaVencimiento    DateTime   // Puedes usar un tipo de datos específico de fecha según tu base de datos
  codigoSeguridad  String // CVV

  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  // Otros campos adicionales según los requisitos específicos
}

model Address {
  idAddress    String   @id @unique @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  street       String
  city         String
  zipcode      Int
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("UserAddresses", fields: [userId], references: [id])
  Order        Order[]
  maxAddresses Int?
}

model Order {
  idOrder          String   @id @unique @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  orderNumber      String   @unique
  addressId String   @db.Uuid
  shippingAddress  Address  @relation(fields: [addressId], references: [idAddress])
  paymentMethod    String
  createdAt        DateTime    @default(now())
  completedAt      DateTime?
  updatedAt        DateTime    @updatedAt
  totalAmount      Decimal  @db.Decimal(10, 2)
  status        OrderStatus
  user          User        @relation(fields: [userId], references: [id])
  orderItems       OrderItem[]
}


model OrderItem {
  idOrderItem String   @id @unique @default(uuid()) @db.Uuid
  orderId     String   @db.Uuid
  productId   String   @db.Uuid
  quantity    Int
  price       Decimal  @db.Decimal(9, 2)
  order       Order    @relation(fields: [orderId], references: [idOrder])
  product     Product  @relation(fields: [productId], references: [idProduct])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum Roles {
  ADMINISTRADOR
  MIEMBRO
  CLIENTE
}
